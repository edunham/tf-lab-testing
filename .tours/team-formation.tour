{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "🏁 Module-Based Team Formation",
  "description": "Learn production-quality Terraform with modules! Create racing teams using modern Infrastructure as Code patterns.",
  "steps": [
    {
      "file": "README.md",
      "line": 140,
      "description": "# 🏎️ Check Your Environment First!\n\n**IMPORTANT:** Before starting, verify your environment variables are set!\n\n**If you used Codespaces secrets at github.com/settings/codespaces:**\n```bash\necho \"Org Name: $OKTA_ORG_NAME\"\necho \"Base URL: $OKTA_BASE_URL\" \necho \"Token loaded: $([ -n \"$OKTA_API_TOKEN\" ] && echo \"✅ Yes\" || echo \"❌ No\")\"\n```\n\n**✅ If all show values:** You're ready!\n**❌ If any are missing:** Set them up following the README guide.\n\n**Why check first?** Saves time and prevents authentication errors later! 🔐"
    },
    {
      "file": "terraform.tfvars.example",
      "line": 9,
      "description": "# ⚙️ Progressive Deployment Control\n\n**Key concept:** The new module architecture uses progressive deployment!\n\n**Start with teams only:**\n```hcl\nenable_drivers = false  # Teams first!\n```\n\n**Later, add drivers:**\n```hcl\nenable_drivers = true   # Full infrastructure!\n```\n\n**Why this rocks:** Learn incrementally while following production patterns! Real companies deploy infrastructure in stages. 🚀"
    },
    {
      "file": "terraform.tfvars.example",
      "line": 114,
      "description": "# 📋 Your Exercise Steps\n\n**Copy this file first:**\n```bash\ncp terraform.tfvars.example terraform.tfvars\n```\n\n**Key commands:**\n1. `terraform init` - Download providers and initialize modules\n2. `terraform plan` - Preview your racing teams\n3. `terraform apply` - Deploy to Okta!\n\n**Expected result:** 4 F1 racing teams created, drivers module skipped (because enable_drivers = false)\n\n**Ready to copy the file and start?** 🏁"
    },
    {
      "file": "main.tf",
      "line": 39,
      "description": "# 🏗️ Racing Teams Module Call\n\n**This is the new way!** Instead of individual resources, we call a module:\n\n**What's happening:**\n- `source = \"./modules/racing-teams\"` - Local module path\n- Variables passed to the module (racing_season, racing_teams, etc.)\n- Module creates all team resources internally\n\n**Benefits:**\n- Organized code structure\n- Reusable components\n- Production-ready patterns\n\n**Click through to see the module internals!** 🔍"
    },
    {
      "file": "modules/racing-teams/main.tf",
      "line": 18,
      "description": "# 🏎️ Module Resource Creation\n\n**Inside the module:** Here's where the real work happens!\n\n**Key pattern:**\n```hcl\nresource \"okta_group\" \"racing_teams\" {\n  for_each = var.racing_teams\n```\n\n**What this does:**\n- Creates one group per team in the racing_teams variable\n- Uses `for_each` for scalable resource creation\n- Builds descriptions dynamically from structured data\n\n**Real benefit:** Add a 5th team by just updating variables! 📈"
    },
    {
      "file": "modules/racing-teams/main.tf",
      "line": 35,
      "description": "# 🎨 Dynamic Description Building\n\n**Smart string interpolation:**\n```hcl\ndescription = \"${each.value.description} | Team Principal: ${each.value.team_principal} | ...\"\n```\n\n**What you get:**\n- Consistent formatting across all teams\n- Rich metadata in descriptions\n- Easy to modify the template in one place\n\n**Example result:** \"Speed-focused racing team... | Team Principal: Sam Velocity | Home Circuit: Monaco Street Circuit | Specialty: Aerodynamics | Season: 2025\""
    },
    {
      "file": "modules/racing-teams/outputs.tf",
      "line": 5,
      "description": "# 📤 Module Outputs\n\n**Critical for module composition!** These outputs will be used by other modules:\n\n**Key exports:**\n- `team_ids` - Map of team keys to Okta group IDs\n- `team_names` - Map of team keys to display names\n- `team_summary` - Complete team information\n\n**Why this matters:** The drivers module will use these outputs to assign drivers to the correct teams! 🔗"
    },
    {
      "file": "main.tf",
      "line": 51,
      "description": "# 🏁 Conditional Drivers Module\n\n**Advanced pattern:** Module with conditional deployment!\n\n```hcl\ncount = var.enable_drivers ? 1 : 0\n```\n\n**What this means:**\n- When `enable_drivers = false`: Module not deployed (0 instances)\n- When `enable_drivers = true`: Module deployed (1 instance)\n\n**Real-world value:** Deploy infrastructure incrementally, perfect for environments where you need staged rollouts!"
    },
    {
      "file": "main.tf",
      "line": 62,
      "description": "# 🔄 Module Data Flow\n\n**See the dependency chain:**\n```hcl\nteam_ids   = module.racing_teams.team_ids\nteam_names = module.racing_teams.team_names\n```\n\n**Data flow:** racing_teams module → outputs → racing_drivers module inputs\n\n**Critical best practice:** This prevents the state file conflicts we had before! All resources managed in one state file, with proper dependencies. 🎯"
    },
    {
      "file": "outputs.tf",
      "line": 5,
      "description": "# 📊 Progressive Output Display\n\n**Smart conditional outputs:**\n```hcl\nvalue = var.enable_drivers ? local.driver_outputs.created_drivers : {}\n```\n\n**What you'll see:**\n- **Teams only:** Team information and \"drivers not enabled\" messages\n- **Full deployment:** Complete team and driver information\n\n**Educational value:** Clear feedback on what's deployed and what's next! 📈"
    },
    {
      "directory": ".",
      "description": "# 🏁 Ready to Deploy Your Racing Teams!\n\n**Your mission (stay in root directory):**\n\n1. **Verify environment variables:**\n   ```bash\n   echo \"Org: $OKTA_ORG_NAME\" # Should show your org\n   ```\n\n2. **Copy and customize configuration:**\n   ```bash\n   cp terraform.tfvars.example terraform.tfvars\n   # Ensure enable_drivers = false for now\n   ```\n\n3. **Deploy teams module:**\n   ```bash\n   terraform init\n   terraform plan  # Should show 4 teams, drivers module skipped\n   terraform apply # Deploy!\n   ```\n\n**Success criteria:** 4 racing teams in Okta, clean module-based output!\n\n**Next:** Set `enable_drivers = true` and see the magic! 🚀"
    }
  ]
}