{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1: 🏁 Formula 1 Terraform Basics",
  "nextTour": "2: 🏁 Module-Based Team Formation",
  "description": "Welcome to the pit lane! This tour introduces Terraform fundamentals using our racing team infrastructure.",
  "steps": [
    {
      "file": "main.tf",
      "line": 1,
      "description": "# 🏎️ Welcome to the Racing Lab!\n\nWelcome to our Formula 1 Terraform lab! Just like a race car is built from many precisely engineered components, our infrastructure is defined using **Infrastructure as Code** with Terraform.\n\n**What you'll learn:**\n- How Terraform manages infrastructure\n- Okta provider configuration\n- Racing team resource definitions\n- F1-themed practical examples\n\n**First, we need to set up your Okta credentials!** Let's get you connected to your racing command center! 🏁"
    },
    {
      "directory": ".",
      "description": "# 🔐 Step 1: Create Your API Token\n\n**You'll need an API token to manage your Okta organization.**\n\n**To create your API token:**\n1. **From the Okta Admin console, go to** Security → API → Tokens tab\n2. **Click:** \"Create Token\"\n3. **Name it:** \"Terraform Racing Lab\"\n4. **Set IP restrictions:** Select \"Any IP\" (for lab purposes)\n5. **Click:** \"Create Token\"\n6. **COPY THE TOKEN IMMEDIATELY** - you won't see it again! (We'll use this in the next step so you don't need to worry about pasting it anywhere just yet.)\n\n**⚠️ Important:** Keep this token safe - it's like the keys to your racing team headquarters!"
    },
    {
      "directory": ".",
      "description": "# 🔧 Step 2: Store Your Secrets Securely\n\n**GitHub Codespaces provides secure secret storage for your API credentials.**\n\n**Set up your Codespace secrets:**\n1. **Open:** [GitHub Codespaces Secrets](https://github.com/settings/codespaces)\n2. **Click:** \"New secret\" and create these **3 secrets**:\n\n| Secret Name | Value | Your Example |\n|-------------|-------|--------------|\n| `OKTA_ORG_NAME` | **JUST the org name** (before .oktapreview.com) | `dev-123456` |\n| `OKTA_BASE_URL` | Your base URL | `oktapreview.com` |\n| `OKTA_API_TOKEN` | Your API token from Step 1 | `00abc123def456...` |\n\n**⚠️ Important for OKTA_ORG_NAME:**\n- ✅ **Correct:** `dev-123456` or `oktaicedev002112`\n- ❌ **Wrong:** `dev-123456.oktapreview.com` or `https://dev-123456.oktapreview.com`\n\n3. **For each secret:** Select this repository in \"Repository access\"\n4. **Restart your Codespace** to load the secrets\n\n**🔒 Why this way?** Keeps credentials secure and out of your code!"
    },
    {
      "directory": ".",
      "description": "# ✅ Step 3: Verify Your Environment\n\n**Let's make sure your racing communication system is working!**\n\n**Check your environment variables:**\n\nSelect [this link](command:codetour.sendTextToTerminal?[\"echo 'Org Name:' $OKTA_ORG_NAME; echo 'Base URL:' $OKTA_BASE_URL; [ -n '$OKTA_API_TOKEN' ] && echo 'Token loaded: ✅ Yes' || echo 'Token loaded: ❌ No'\"]) to check all your credentials at once.\n\n**Expected output:**\n- Org Name: dev-123456 (your org)\n- Base URL: oktapreview.com\n- Token loaded: ✅ Yes\n\n**❌ If any are missing:** Your secrets aren't loaded - restart your Codespace!"
    },
    {
      "directory": ".",
      "description": "# 🔌 Step 4: Test Your Connection\n\n**Let's verify you can communicate with race control!**\n\n**Test your Okta API connection:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"curl -H \\\"Authorization: SSWS $OKTA_API_TOKEN\\\" \\\"https://$OKTA_ORG_NAME.$OKTA_BASE_URL/api/v1/users/me\\\"\"]) to test your API connection.\n\n**Expected result:** JSON data about your user account\n\n**✅ Success:** You should see your user information in JSON format  \n**❌ Error:** Check your token and org name - one might be incorrect\n\n**🏁 Ready to race?** Your pit crew (credentials) are ready!"
    },
    {
      "file": "main.tf",
      "line": 24,
      "selection": {
        "start": {
          "line": 15,
          "character": 1
        },
        "end": {
          "line": 24,
          "character": 30
        }
      },
      "description": "# 🔧 Terraform Configuration Block\n\nThis is like the technical regulations for our racing series! The `terraform` block defines:\n\n- **Required version**: Minimum Terraform version needed\n- **Required providers**: External plugins that extend Terraform's capabilities\n\n**For broader infrastructure:** If we wanted to manage AWS, Azure, or other services alongside Okta, we'd add their providers here too. But since this lab focuses on identity management, Okta is our only provider.\n\nJust like F1 cars must meet specific technical requirements, our Terraform code must declare its dependencies upfront."
    },
    {
      "file": "main.tf",
      "line": 23,
      "selection": {
        "start": {
          "line": 18,
          "character": 1
        },
        "end": {
          "line": 23,
          "character": 30
        }
      },
      "description": "# 🏆 Provider Requirements\n\nThe `required_providers` block is like declaring which tire manufacturer we'll use for the race:\n\n- **source**: Where to download the provider (like a parts supplier)\n- **version**: Which version to use (like tire compound specifications)\n\n**Automatic downloads:** When you run `terraform init`, Terraform automatically downloads the required providers from their sources. No manual installation needed!\n\nThe Okta provider gives us resources to manage identity and access - perfect for our racing team organization!"
    },
    {
      "file": "main.tf",
      "line": 30,
      "selection": {
        "start": {
          "line": 28,
          "character": 1
        },
        "end": {
          "line": 30,
          "character": 40
        }
      },
      "description": "# 🔐 Provider Configuration\n\nThe `provider` block is like connecting to race control - it establishes communication with Okta's API.\n\n**Security Note**: We use environment variables for credentials:\n- `OKTA_ORG_NAME` - Your organization name\n- `OKTA_BASE_URL` - Usually oktapreview.com for dev\n- `OKTA_API_TOKEN` - Your API authentication token\n\n**For work environments:** If you're using Terraform at your company, talk to your DevOps or platform teams first! They'll have established patterns for secrets management (like HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault) that you should follow.\n\nThis keeps sensitive data out of our code, just like keeping radio frequencies secure! 📻"
    },
    {
      "file": "main.tf",
      "line": 45,
      "selection": {
        "start": {
          "line": 39,
          "character": 1
        },
        "end": {
          "line": 45,
          "character": 40
        }
      },
      "description": "# 🏁 Racing Teams Module\n\n**Module-based architecture!** Instead of individual resources, we use modules - this is a production-quality pattern!\n\n**Key concepts:**\n- **Modules** organize related resources together\n- **Source** points to our local module directory\n- **Input variables** pass data to the module\n- **Reusability** - modules can be used in different configurations\n\nThis is how real companies structure their Terraform code! 🏗️"
    },
    {
      "file": "main.tf",
      "line": 64,
      "selection": {
        "start": {
          "line": 51,
          "character": 1
        },
        "end": {
          "line": 64,
          "character": 40
        }
      },
      "description": "# 🏎️ Racing Drivers Module (Conditional)\n\n**Advanced pattern:** Conditional module deployment!\n\n**Key features:**\n- `count = var.enable_drivers ? 1 : 0` - Deploy only when enabled\n- **Module dependencies** - drivers module uses outputs from teams module\n- **Progressive deployment** - deploy teams first, then drivers\n\n**Real-world value:** This pattern lets you deploy infrastructure incrementally, which is crucial for production environments!"
    },
    {
      "file": "main.tf",
      "line": 63,
      "selection": {
        "start": {
          "line": 62,
          "character": 1
        },
        "end": {
          "line": 63,
          "character": 55
        }
      },
      "description": "# 🔗 Module Dependencies\n\n**Critical best practice:** How modules share data!\n\nSee the highlighted code above showing how team_ids and team_names are passed from one module to another.\n\n**What this demonstrates:**\n- Output from one module becomes input to another\n- Proper dependency management\n- Single source of truth\n\n**Why this matters:** This prevents the state file conflicts we fixed! 🎯"
    },
    {
      "file": "variables.tf",
      "line": 1,
      "description": "# 📋 Variables File\n\nVariables make our Terraform code flexible and reusable - like having adjustable car settings! \n\n**Benefits:**\n- Same code works for different environments\n- Easy to modify without changing main logic\n- Type validation ensures data quality\n- Default values provide sensible starting points\n\n**Take a look:** Scroll through this `variables.tf` file to see how racing team data is structured with validation rules and descriptions."
    },
    {
      "file": "outputs.tf",
      "line": 1,
      "description": "# 📊 Outputs File\n\nOutputs are like telemetry data from our infrastructure - they show us what was created and provide data for other systems.\n\n**Common uses:**\n- Display resource IDs after creation\n- Pass data between Terraform configurations\n- Integration with monitoring systems\n- Verification that resources were created correctly\n\nThink of it as the timing screens showing lap times and positions!\n\n**Explore the structure:** Review this `outputs.tf` file to see how we'll display team and driver information after deployment."
    },
    {
      "file": "terraform.tfvars.example",
      "line": 1,
      "description": "# 📝 Step 5: Create Your Configuration File\n\n**Every Terraform project needs a configuration file** to specify your desired infrastructure settings.\n\n**Let's create your `terraform.tfvars` file:**\n\n**Option 1 - Command line:** Select [this link](command:codetour.sendTextToTerminal?[\"cp terraform.tfvars.example terraform.tfvars\"]) to copy the example file.\n\n**Option 2 - VS Code interface:**\n1. Right-click on `terraform.tfvars.example` in the file explorer (left sidebar)\n2. Select \"Copy\"\n3. Right-click in empty space → \"Paste\" → Rename to `terraform.tfvars`\n\n**✅ File created!** You now have your own configuration file to customize."
    },
    {
      "file": "terraform.tfvars.example",
      "line": 9,
      "description": "# ⚙️ Understanding Progressive Deployment\n\n**Notice this important setting:** `enable_drivers = false`\n\nThis controls our **progressive deployment strategy**:\n- **Step 1**: Deploy racing teams only (`enable_drivers = false`)\n- **Step 2**: Add drivers to teams (`enable_drivers = true`)\n\n**Why this approach?**\n- Learn concepts incrementally\n- Follow production deployment patterns\n- Verify each stage works before proceeding\n\n**For now, keep this as `false`** - we'll change it later! 🏎️"
    },
    {
      "file": "terraform.tfvars",
      "line": 9,
      "description": "# ✏️ File Editing Tips\n\n**Your `terraform.tfvars` file is now open** (notice the tab above).\n\n**File editing basics:**\n- **Click anywhere** in the file to start editing\n- **Save changes** with Ctrl+S (Cmd+S on Mac)\n- **Unsaved changes** show as a white dot on the file tab\n- **Auto-save** is enabled by default in most cases\n\n**For this lab:** We'll guide you on what to change and when. No changes needed right now!\n\n**✅ You're ready for deployment!** The next tour will walk you through your first `terraform apply`."
    },
    {
      "file": "README.md",
      "line": 1,
      "description": "# 🏁 Ready to Race!\n\nCongratulations! You've completed the Terraform basics tour. You now understand:\n\n✅ **Module-based architecture** (production-quality patterns!)\n\n✅ **Progressive deployment** (teams first, then drivers)\n\n✅ **Single state file management** (critical best practice)\n\n✅ **Module dependencies** and data sharing\n\n✅ **Configuration file creation** and editing\n\n✅ **F1-themed practical examples**\n\n**🎯 Important Pattern:** Throughout the next tours, you'll **check your Okta dashboard** before and after each `terraform apply` to:\n\n- See the \"before\" state\n\n- Verify changes were applied correctly\n\n- Understand what Infrastructure as Code actually does\n\n**Next tour:** \"Module-Based Team Formation\" will walk you through the complete deployment workflow with dashboard verification!\n\n**Pro tip**: Always verify your infrastructure changes in the target system - it's a production best practice! 🚀"
    }
  ]
}