{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "4: 🏁 Extra Credit - Import & Data Sources",
  "description": "Master advanced Terraform skills! Learn to use data sources to find existing Okta users and import them into Terraform management. Practice the pit crew strategy: find existing talent, bring them under team management, and clean up when needed!",
  "steps": [
    {
      "directory": ".",
      "description": "# 🏆 Welcome to Extra Credit!\n\n**Advanced techniques ahead:**\n- 🔍 **Data sources** - Finding existing Okta users\n- 📥 **Terraform import** - Managing pre-existing resources\n- 🧹 **Selective destruction** - Cleaning up imported resources\n\n**F1 Scenario:** Your racing organization has grown! There's an experienced driver already in your Okta org who wants to join the team. We'll use real-world techniques to bring them under Terraform management.\n\n**Prerequisites:**\n- ✅ Completed Tours 1-3\n- ✅ An existing user in your Okta org (not managed by Terraform)\n- ✅ Basic understanding of Terraform state\n\n**🎯 Real-world relevance:** These are essential skills for managing existing infrastructure with Terraform!\n\n**Ready to become a Terraform pit crew boss?** 🏁"
    },
    {
      "directory": ".",
      "description": "# 👀 Check Your Okta Dashboard - Find Your Driver!\n\n**First, let's identify an existing user to import:**\n\n🔍 **Go to your Okta People page**\n- Look for any user that's NOT one of your 4 racing drivers\n- This could be your admin user or any other existing account\n- **Make note of their email address** - you'll need it!\n\n🔍 **Click on that user and note:**\n- Their first and last name\n- Their email address\n- Any group memberships\n- Their user ID (in the URL or profile)\n\n**🎯 Why this matters:** In real organizations, you often need to bring existing users under Terraform management without recreating them.\n\n**Example scenario:** \"Fernando Alonso\" with email `fernando.alonso@your-domain.com` is already in Okta but not managed by Terraform.\n\n**📝 Write down the email - you'll use it in the next step!**"
    },
    {
      "directory": ".",
      "description": "# 🔍 Time to Create Your Data Source!\n\n**Let's create a new file to practice data sources!**\n\n**Create the file:** Right-click in the file explorer → \"New File\" → Name it `data-sources-example.tf`\n\n**Add this content (replace with YOUR user's email):**\n\n```terraform\n# AIDEV-NOTE: Data source example for finding existing Okta user\n# Find an existing experienced driver to join our F1 organization\ndata \"okta_user\" \"veteran_driver\" {\n  search {\n    name  = \"profile.email\"\n    value = \"fernando.alonso@your-domain.com\"  # Replace with YOUR user's email!\n  }\n}\n\n# Display information about the found user\noutput \"veteran_driver_info\" {\n  description = \"Information about our veteran F1 driver found via data source\"\n  value = {\n    id         = data.okta_user.veteran_driver.id\n    first_name = data.okta_user.veteran_driver.first_name\n    last_name  = data.okta_user.veteran_driver.last_name\n    email      = data.okta_user.veteran_driver.email\n    login      = data.okta_user.veteran_driver.login\n    groups     = data.okta_user.veteran_driver.group_memberships\n  }\n}\n```\n\n**🔥 Replace the email address with YOUR actual existing user's email!**"
    },
    {
      "directory": ".",
      "description": "# 🧪 Test Your Data Source\n\n**Let's see data sources in action!**\n\n**Run terraform plan:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"terraform plan\"]) to see what Terraform discovers!\n\n**📋 What you should see:**\n- ✅ **No changes to infrastructure** - Data sources are read-only!\n- ✅ **Output will be generated** - Shows found user information\n- ⚠️ **If error:** User not found - double-check the email address\n\n**Key insight:** Data sources query existing infrastructure without modifying it. They're perfect for:\n- Finding existing resources\n- Getting IDs for references\n- Validation and discovery\n\n**🔍 Next, run terraform apply to see the output:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"terraform apply\"]) and type `yes`.\n\n**Expected result:** Your user's information displayed in the output! 🎯"
    },
    {
      "directory": ".",
      "description": "# 📊 Understanding the Data Source Output\n\n**Check your terminal output after the apply!**\n\n**You should see something like:**\n```\nveteran_driver_info = {\n  \"email\" = \"fernando.alonso@your-domain.com\"\n  \"first_name\" = \"Fernando\"\n  \"groups\" = [\"00g...\", \"00g...\"]\n  \"id\" = \"00u1234567890abcdef\"\n  \"last_name\" = \"Alonso\"\n  \"login\" = \"fernando.alonso@your-domain.com\"\n}\n```\n\n**🎯 Key observations:**\n- **User ID:** That long `00u...` string is the Okta user ID\n- **Groups:** Array of group IDs (not names) the user belongs to\n- **Read-only:** No actual changes were made to Okta\n\n**💡 Copy that User ID** - you'll need it for the import step!\n\n**F1 insight:** Just like a pit crew assessing a new driver's current setup before making changes! 🏁"
    },
    {
      "directory": ".",
      "description": "# 📥 Time to Import Your Veteran Driver!\n\n**Create a new file for import demonstration:**\n\n**Create the file:** Right-click → \"New File\" → Name it `import-example.tf`\n\n**Add this Terraform resource (update with YOUR user's details):**\n\n```terraform\n# AIDEV-NOTE: Imported user resource - manages existing Okta user with Terraform\n# This resource will be imported from existing Okta user\nresource \"okta_user\" \"imported_veteran\" {\n  first_name = \"Fernando\"        # Replace with actual first name\n  last_name  = \"Alonso\"         # Replace with actual last name  \n  login      = \"fernando.alonso@your-domain.com\"  # Replace with actual email\n  email      = \"fernando.alonso@your-domain.com\"  # Replace with actual email\n  \n  # F1-themed additions for our racing organization\n  title           = \"Veteran F1 Driver\"\n  department      = \"Racing Operations\"\n  employee_number = \"F1-VETERAN-001\"\n}\n\n# Add them to one of our racing teams!\nresource \"okta_group_memberships\" \"veteran_team_assignment\" {\n  group_id = module.racing_teams.team_ids[\"velocity-racing\"]  # Assign to Velocity Racing\n  users = [\n    okta_user.imported_veteran.id\n  ]\n}\n```\n\n**🔥 Critical:** Replace ALL the personal details with YOUR actual user's information from the data source output!"
    },
    {
      "directory": ".",
      "description": "# ⚠️ The Import Challenge\n\n**Let's see what happens if we try to apply without importing first:**\n\n**Run terraform plan:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"terraform plan\"]) \n\n**🚨 Expected error:** \n```\nError: User with login fernando.alonso@your-domain.com already exists\n```\n\n**Why this happens:**\n- Terraform wants to CREATE a new user\n- But that user already EXISTS in Okta\n- Okta won't allow duplicate logins\n\n**🏁 F1 Analogy:** It's like trying to hire Fernando Alonso when he's already on your team - you need to acknowledge he's already there!\n\n**The solution?** Terraform import! We need to tell Terraform: \"This resource already exists, please manage it instead of creating it.\"\n\n**Ready to learn the import magic?** 🎯"
    },
    {
      "directory": ".",
      "description": "# 🎯 Master the Terraform Import!\n\n**Time for the import command!**\n\n**Run the import (replace USER_ID with the ID from your data source output):**\n\n```bash\nterraform import okta_user.imported_veteran 00u1234567890abcdef\n```\n\n**Manually run this command in terminal:**\nCopy the command above, replace the USER_ID, and run it in your terminal.\n\n**🎯 What terraform import does:**\n1. Finds the existing user in Okta\n2. Adds it to Terraform's state file\n3. Associates it with your resource definition\n4. Now Terraform can manage it!\n\n**Success message should show:**\n```\nokta_user.imported_veteran: Importing from ID \"00u...\"\nokta_user.imported_veteran: Import prepared!\n  Imported okta_user.imported_veteran\n```\n\n**🏁 Nice work:** You've just brought an existing driver under team management!"
    },
    {
      "directory": ".",
      "description": "# 👀 Check Your Okta Dashboard - Before Team Assignment\n\n**Let's verify the current state before making changes:**\n\n🔍 **Go to your Okta People page → Find your imported user**\n- Note their current profile information\n- Check their current group memberships\n- They should NOT be in any racing teams yet\n\n🔍 **Go to your Okta Groups page → Click on \"Velocity Racing\" → People tab**\n- Should show your existing racing drivers\n- Should NOT show your imported veteran driver yet\n\n**🎯 Why check?** You'll see the difference after Terraform manages the user and adds them to the racing team!\n\n**Ready to see Terraform update the existing user?** 🚀"
    },
    {
      "directory": ".",
      "description": "# 🔄 Plan the Updates to Your Imported User\n\n**Now let's see what Terraform wants to change:**\n\n**Run terraform plan:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"terraform plan\"]) \n\n**📋 What you should see:**\n- **User modifications:** Title, department, employee_number being updated\n- **Group membership creation:** Assignment to Velocity Racing team\n- **No user recreation:** The import worked - Terraform knows this user exists!\n\n**Example plan output:**\n```\n~ okta_user.imported_veteran will be updated in-place\n  ~ title           = \"\" -> \"Veteran F1 Driver\"\n  ~ department      = \"\" -> \"Racing Operations\"\n  ~ employee_number = \"\" -> \"F1-VETERAN-001\"\n\n+ okta_group_memberships.veteran_team_assignment will be created\n```\n\n**🎯 Key insight:** Import preserves existing users while allowing Terraform to manage their configuration! 🏁"
    },
    {
      "directory": ".",
      "description": "# 🚀 Apply the Changes to Your Imported User!\n\n**Time to update your veteran driver's profile and team assignment:**\n\n**Run terraform apply:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"terraform apply\"]) and type `yes` when prompted.\n\n**What you'll see:**\n- **Profile updates:** F1-themed title, department, and employee number added\n- **Team assignment:** User added to Velocity Racing team\n- **Existing data preserved:** All original user info maintained\n\n**Success criteria:**\n- User profile updated with racing-themed information\n- User added to Velocity Racing team\n- No duplicate users created\n- Original user data preserved\n\n**⏰ Takes 10-20 seconds** - Updating existing user via Okta API! 🏗️\n\n**🏁 Good job!** You've just demonstrated importing existing resources into Terraform management."
    },
    {
      "directory": ".",
      "description": "# 👀 Check Your Okta Dashboard - After Import & Update\n\n**Let's verify your import and updates worked perfectly:**\n\n🔍 **Go to your Okta People page → Find your imported user**\n- **Title** should now show \"Veteran F1 Driver\"\n- **Department** should show \"Racing Operations\" \n- **Employee Number** should show \"F1-VETERAN-001\"\n- All original information should be preserved\n\n🔍 **Go to Groups → \"Velocity Racing\" → People tab**\n- Should now include your imported veteran driver\n- Should still show the original Velocity Racing driver (Alex Speedwell)\n\n🔍 **Click on your imported user → Groups tab**\n- Should show \"Velocity Racing\" in their group memberships\n- Should show any original groups they were in\n\n**✅ Success indicators:** Profile updated, team assigned, no data lost!\n\n**🏁 Nice!** You've successfully imported and managed an existing resource."
    },
    {
      "directory": ".",
      "description": "# 🧹 Selective Cleanup - Team Roster Management\n\n**Let's practice selective destruction with a realistic scenario:**\n\n**🎯 Real-world scenario:** The veteran driver is moving to a different department but staying in the organization. We need to remove their team assignment but keep their user account.\n\n**Run targeted destroy (ONLY the team membership):**\nManually run this command in your terminal:\n```bash\nterraform destroy -target=okta_group_memberships.veteran_team_assignment\n```\n\n**What this does:**\n- **Removes team assignment:** Driver leaves the racing team\n- **Preserves user account:** Driver stays in the organization\n- **Realistic scenario:** Like transferring to marketing or operations\n- **Selective targeting:** Only affects the specific resource\n\n**📋 You'll be prompted to confirm:** Type `yes` to proceed.\n\n**🏁 F1 Reality:** Drivers sometimes switch teams or retire from racing but stay with the organization in other roles! 🎯"
    },
    {
      "directory": ".",
      "description": "# 👀 Final Dashboard Check - Selective Team Removal\n\n**Let's confirm the targeted destroy worked correctly:**\n\n🔍 **Go to your Okta People page**\n- Your 4 original racing drivers should still be there\n- Your imported veteran driver should STILL BE THERE (just no longer on the racing team)\n\n🔍 **Go to Groups → \"Velocity Racing\" → People tab**\n- Should show only the original driver (Alex Speedwell)\n- Should NOT show the imported veteran driver\n\n🔍 **Click on your imported veteran driver → Groups tab**\n- Should NOT show \"Velocity Racing\" anymore\n- Should still show their original groups\n- User profile should still have the F1-themed updates\n\n🔍 **Go to Groups page**\n- All 4 racing teams should still exist\n- No racing infrastructure was affected\n\n**✅ Perfect selective management:** Team assignment removed, user account preserved! 🎉\n\n**🏁 Real-world relevance:** This is how you manage team changes without affecting user accounts! 🏆"
    },
    {
      "directory": ".",
      "description": "# 🧹 Clean Up Your Exercise Files\n\n**Let's remove the example files we created:**\n\n**Delete the exercise files:**\n- Right-click on `data-sources-example.tf` → Delete\n- Right-click on `import-example.tf` → Delete\n\n**Run terraform plan to verify:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"terraform plan\"]) \n\n**Should show:** \"No changes. Your infrastructure matches the configuration.\"\n\n**🎯 Why clean up?** In real projects, you don't want experimental files cluttering your production code.\n\n**💡 Production Note:** Notice we only removed the Terraform files - the user account stays in Okta! In real scenarios, you typically don't delete user accounts when removing Terraform management. People stay employed even when their Infrastructure as Code management changes!\n\n**Alternative approach:** You could move these to an `examples/` directory for future reference!\n\n**Ready for the final celebration?** 🏁"
    },
    {
      "directory": ".",
      "description": "# 🏁 Extra Credit Complete!\n\n**What you practiced:**\n- **Data sources** - Finding existing Okta resources\n- **Terraform import** - Managing pre-existing resources\n- **Resource updates** - Modifying imported resources safely\n- **Targeted destruction** - Selective cleanup\n- **State management** - Understanding Terraform state\n\n**When you might use this:**\n- Taking over existing infrastructure\n- Inheriting resources from other teams\n- Importing accidentally deleted resources\n- Making targeted changes\n\nNice work! You've learned some useful Terraform techniques for working with existing infrastructure."
    }
  ]
}