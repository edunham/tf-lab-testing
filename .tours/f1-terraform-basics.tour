{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1: 🏁 Formula 1 Terraform Basics",
  "nextTour": "2: 🏁 Module-Based Team Formation",
  "description": "Welcome to the pit lane! This tour introduces Terraform fundamentals using our racing team infrastructure.",
  "steps": [
    {
      "file": "main.tf",
      "line": 1,
      "description": "# 🏎️ Welcome to the Racing Lab!\n\nWelcome to our Formula 1 Terraform lab! Just like a race car is built from many precisely engineered components, our infrastructure is defined using **Infrastructure as Code** with Terraform.\n\n**What you'll learn:**\n- How Terraform manages infrastructure\n- Okta provider configuration\n- Racing team resource definitions\n- F1-themed practical examples\n\n**First, we need to set up your Okta credentials!** Let's get you connected to your racing command center! 🏁"
    },
    {
      "directory": ".",
      "description": "# 🔐 Step 1: Create Your API Token\n\n**You'll need an API token to manage your Okta organization.**\n\n**To create your API token:**\n1. **Open your Okta Admin Console** in a new tab\n2. **Navigate to:** Security → API → Tokens tab\n3. **Click:** \"Create Token\"\n4. **Name it:** \"Terraform Racing Lab\"\n5. **Set IP restrictions:** Select \"Any IP\" (for lab purposes)\n6. **Click:** \"Create Token\"\n7. **COPY THE TOKEN IMMEDIATELY** - you won't see it again!\n\n**⚠️ Important:** Keep this token safe - it's like the keys to your racing team headquarters!"
    },
    {
      "directory": ".",
      "description": "# 🔧 Step 2: Store Your Secrets Securely\n\n**GitHub Codespaces provides secure secret storage for your API credentials.**\n\n**Set up your Codespace secrets:**\n1. **Open:** [GitHub Codespaces Secrets](https://github.com/settings/codespaces)\n2. **Click:** \"New secret\" and create these **3 secrets**:\n\n| Secret Name | Value | Your Example |\n|-------------|-------|--------------|\n| `OKTA_ORG_NAME` | Your org name (before .oktapreview.com) | `dev-123456` |\n| `OKTA_BASE_URL` | Your base URL | `oktapreview.com` |\n| `OKTA_API_TOKEN` | Your API token from Step 1 | `00abc123def456...` |\n\n3. **For each secret:** Select this repository in \"Repository access\"\n4. **Restart your Codespace** to load the secrets\n\n**🔒 Why this way?** Keeps credentials secure and out of your code!"
    },
    {
      "directory": ".",
      "description": "# ✅ Step 3: Verify Your Environment\n\n**Let's make sure your racing communication system is working!**\n\n**Check your environment variables:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"echo 'Org Name: $OKTA_ORG_NAME'\necho 'Base URL: $OKTA_BASE_URL'\necho 'Token loaded: ' && [ -n \\\"$OKTA_API_TOKEN\\\" ] && echo '✅ Yes' || echo '❌ No'\"]) to verify your credentials are loaded.\n\n**Expected output:**\n- Org Name: dev-123456 (your org)\n- Base URL: oktapreview.com\n- Token loaded: ✅ Yes\n\n**❌ If any are missing:** Your secrets aren't loaded - restart your Codespace!"
    },
    {
      "directory": ".",
      "description": "# 🔌 Step 4: Test Your Connection\n\n**Let's verify you can communicate with race control!**\n\n**Test your Okta API connection:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"curl -H 'Authorization: SSWS $OKTA_API_TOKEN' 'https://$OKTA_ORG_NAME.$OKTA_BASE_URL/api/v1/users/me'\"]) to test your API connection.\n\n**Expected result:** JSON data about your user account\n\n**✅ Success:** You should see your user information in JSON format  \n**❌ Error:** Check your token and org name - one might be incorrect\n\n**🏁 Ready to race?** Your pit crew (credentials) are ready!"
    },
    {
      "file": "main.tf",
      "line": 24,
      "selection": {
        "start": {
          "line": 15,
          "character": 1
        },
        "end": {
          "line": 24,
          "character": 30
        }
      },
      "description": "# 🔧 Terraform Configuration Block\n\nThis is like the technical regulations for our racing series! The `terraform` block defines:\n\n- **Required version**: Minimum Terraform version needed\n- **Required providers**: External plugins that extend Terraform's capabilities\n\nJust like F1 cars must meet specific technical requirements, our Terraform code must declare its dependencies upfront."
    },
    {
      "file": "main.tf",
      "line": 23,
      "selection": {
        "start": {
          "line": 18,
          "character": 1
        },
        "end": {
          "line": 23,
          "character": 30
        }
      },
      "description": "# 🏆 Provider Requirements\n\nThe `required_providers` block is like declaring which tire manufacturer we'll use for the race:\n\n- **source**: Where to download the provider (like a parts supplier)\n- **version**: Which version to use (like tire compound specifications)\n\nThe Okta provider gives us resources to manage identity and access - perfect for our racing team organization!"
    },
    {
      "file": "main.tf",
      "line": 30,
      "selection": {
        "start": {
          "line": 28,
          "character": 1
        },
        "end": {
          "line": 30,
          "character": 40
        }
      },
      "description": "# 🔐 Provider Configuration\n\nThe `provider` block is like connecting to race control - it establishes communication with Okta's API.\n\n**Security Note**: We use environment variables for credentials:\n- `OKTA_ORG_NAME` - Your organization name\n- `OKTA_BASE_URL` - Usually oktapreview.com for dev\n- `OKTA_API_TOKEN` - Your API authentication token\n\nThis keeps sensitive data out of our code, just like keeping radio frequencies secure! 📻"
    },
    {
      "file": "main.tf",
      "line": 45,
      "selection": {
        "start": {
          "line": 39,
          "character": 1
        },
        "end": {
          "line": 45,
          "character": 40
        }
      },
      "description": "# 🏁 Racing Teams Module\n\n**NEW: Module-based architecture!** Instead of individual resources, we use modules - this is a production-quality pattern!\n\n**Key concepts:**\n- **Modules** organize related resources together\n- **Source** points to our local module directory\n- **Input variables** pass data to the module\n- **Reusability** - modules can be used in different configurations\n\nThis is how real companies structure their Terraform code! 🏗️"
    },
    {
      "file": "main.tf",
      "line": 64,
      "selection": {
        "start": {
          "line": 51,
          "character": 1
        },
        "end": {
          "line": 64,
          "character": 40
        }
      },
      "description": "# 🏎️ Racing Drivers Module (Conditional)\n\n**Advanced pattern:** Conditional module deployment!\n\n**Key features:**\n- `count = var.enable_drivers ? 1 : 0` - Deploy only when enabled\n- **Module dependencies** - drivers module uses outputs from teams module\n- **Progressive deployment** - deploy teams first, then drivers\n\n**Real-world value:** This pattern lets you deploy infrastructure incrementally, which is crucial for production environments!"
    },
    {
      "file": "main.tf",
      "line": 63,
      "selection": {
        "start": {
          "line": 62,
          "character": 1
        },
        "end": {
          "line": 63,
          "character": 55
        }
      },
      "description": "# 🔗 Module Dependencies\n\n**Critical best practice:** How modules share data!\n\n```\nteam_ids   = module.racing_teams.team_ids\nteam_names = module.racing_teams.team_names\n```\n\n**What this demonstrates:**\n- Output from one module becomes input to another\n- Proper dependency management\n- Single source of truth\n\n**Why this matters:** This prevents the state file conflicts we fixed! 🎯"
    },
    {
      "file": "variables.tf",
      "line": 1,
      "description": "# 📋 Variables File\n\nVariables make our Terraform code flexible and reusable - like having adjustable car settings! \n**Benefits:**\n- Same code works for different environments\n- Easy to modify without changing main logic\n- Type validation ensures data quality\n- Default values provide sensible starting points\n\nNotice that `variables.tf` has been opened for you. Scroll through to see how team data is structured!"
    },
    {
      "file": "outputs.tf",
      "line": 1,
      "description": "# 📊 Outputs File\n\nOutputs are like telemetry data from our infrastructure - they show us what was created and provide data for other systems.\n\n**Common uses:**\n- Display resource IDs after creation\n- Pass data between Terraform configurations\n- Integration with monitoring systems\n- Verification that resources were created correctly\n\nThink of it as the timing screens showing lap times and positions!\n\nNotice that `outputs.tf` has been opened for you.\n"
    },
    {
      "file": "README.md",
      "line": 1,
      "description": "# 🏁 Ready to Race!\n\nCongratulations! You've completed the Terraform basics tour. You now understand:\n\n✅ **Module-based architecture** (production-quality patterns!)\n✅ **Progressive deployment** (teams first, then drivers)\n✅ **Single state file management** (critical best practice)\n✅ **Module dependencies** and data sharing\n✅ **F1-themed practical examples**\n\n**Next steps:**\n1. **Check your environment variables:** `echo $OKTA_ORG_NAME`\n2. **Copy configuration:** `cp terraform.tfvars.example terraform.tfvars`\n3. **Deploy teams:** `terraform init && terraform apply` (enable_drivers = false)\n4. **Add drivers:** Set `enable_drivers = true` and `terraform apply` again\n\n**Pro tip**: This new workflow teaches production patterns from day one! 🚀"
    }
  ]
}