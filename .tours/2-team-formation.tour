{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2: 🏁 Module-Based Team Formation",
  "nextTour": "3: 🏎️ Progressive Driver Deployment",
  "description": "Learn production-quality Terraform with modules! Create racing teams using modern Infrastructure as Code patterns.",
  "steps": [
    {
      "file": "README.md",
      "line": 140,
      "description": "# 🏎️ Check Your Environment First!\n\n**IMPORTANT:** Before starting, verify your environment variables are set!\n\n**If you used Codespaces secrets at github.com/settings/codespaces:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"echo \\\"Org Name: $OKTA_ORG_NAME\\\"; echo \\\"Base URL: $OKTA_BASE_URL\\\"; echo \\\"Token loaded: \\\" && [ -n \\\"$OKTA_API_TOKEN\\\" ] && echo \\\"✅ Yes\\\" || echo \\\"❌ No\\\"\"]) to verify your credentials are loaded.\n\n**✅ If all show values:** You're ready!\n**❌ If any are missing:** Set them up following the README guide.\n\n**Why check first?** Saves time and prevents authentication errors later! 🔐"
    },
    {
      "file": "terraform.tfvars.example",
      "line": 9,
      "description": "# ⚙️ Progressive Deployment Control\n\n**Key concept:** The new module architecture uses progressive deployment!\n\nIn the code above, we currently start with teams only:\n\n`enable_drivers = false  # Teams first!`\n\nLater, we will add drivers by setting the `enable_drivers` variable to true!\n\n**Why this rocks:** Learn incrementally while following production patterns! Real companies deploy infrastructure in stages. 🚀"
    },
    {
      "file": "terraform.tfvars.example",
      "line": 114,
      "description": "# 📋 Your Exercise Steps\n\n**Copy this file first:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"cp terraform.tfvars.example terraform.tfvars\"]) to copy the example configuration.\n\n**Next we'll learn about some key commands - don't run them yet!**\n\n**Key commands:**\n1. `terraform init` - Download providers and initialize modules\n2. `terraform plan` - Preview your racing teams\n3. `terraform apply` - Deploy to Okta!\n\n**Expected result:** 4 F1 racing teams created, drivers module skipped (because enable_drivers = false)\n\n**Ready to start?** 🏁"
    },
    {
      "file": "main.tf",
      "line": 39,
      "description": "# 🏗️ Racing Teams Module Call\n\n**This is the new way!** Instead of individual resources, we call a module:\n\n**What's happening:**\n- `source = \"./modules/racing-teams\"` - Local module path\n- Variables passed to the module (racing_season, racing_teams, etc.)\n- Module creates all team resources internally\n\n**Benefits:**\n- Organized code structure\n- Reusable components\n- Production-ready patterns\n\n**Click through to see the module internals!** 🔍"
    },
    {
      "file": "modules/racing-teams/main.tf",
      "line": 18,
      "selection": {
        "start": {
          "line": 18,
          "character": 1
        },
        "end": {
          "line": 19,
          "character": 40
        }
      },
      "description": "# 🏎️ Module Resource Creation\n\n**Inside the module:** Here's where the real work happens!\n\nNotice the key pattern in the highlighted code above.\n\n**What this does:**\n- Creates one group per team in the racing_teams variable\n- Uses `for_each` for scalable resource creation\n- Builds descriptions dynamically from structured data\n\n**Real benefit:** Add a 5th team by just updating variables! 📈"
    },
    {
      "file": "modules/racing-teams/main.tf",
      "line": 25,
      "selection": {
        "start": {
          "line": 25,
          "character": 3
        },
        "end": {
          "line": 25,
          "character": 180
        }
      },
      "description": "# 🎨 Dynamic Description Building\n\n**Smart string interpolation in the highlighted code above.**\n\n**What you get:**\n- Consistent formatting across all teams\n- Rich metadata in descriptions\n- Easy to modify the template in one place\n\n**Example result:** \"Speed-focused racing team... | Team Principal: Sam Velocity | Home Circuit: Monaco Street Circuit | Specialty: Aerodynamics | Season: 2025\""
    },
    {
      "file": "modules/racing-teams/outputs.tf",
      "line": 5,
      "description": "# 📤 Module Outputs\n\n**Critical for module composition!** These outputs will be used by other modules:\n\n**Key exports:**\n- `team_ids` - Map of team keys to Okta group IDs\n- `team_names` - Map of team keys to display names\n- `team_summary` - Complete team information\n\n**Why this matters:** The drivers module will use these outputs to assign drivers to the correct teams! 🔗"
    },
    {
      "file": "main.tf",
      "line": 55,
      "selection": {
        "start": {
          "line": 55,
          "character": 3
        },
        "end": {
          "line": 55,
          "character": 40
        }
      },
      "description": "# 🏁 Conditional Drivers Module\n\n**Advanced pattern:** Module with conditional deployment!\n\nNotice the key pattern in the highlighted code above.\n\n**What this means:**\n- When `enable_drivers = false`: Module not deployed (0 instances)\n- When `enable_drivers = true`: Module deployed (1 instance)\n\n**Real-world value:** Deploy infrastructure incrementally, perfect for environments where you need staged rollouts!"
    },
    {
      "file": "main.tf",
      "line": 62,
      "selection": {
        "start": {
          "line": 62,
          "character": 3
        },
        "end": {
          "line": 63,
          "character": 60
        }
      },
      "description": "# 🔄 Module Data Flow\n\n**See the dependency chain in the highlighted code above.**\n\n**Data flow:** racing_teams module → outputs → racing_drivers module inputs\n\n**Critical best practice:** This prevents the state file conflicts we had before! All resources managed in one state file, with proper dependencies. 🎯"
    },
    {
      "file": "outputs.tf",
      "line": 5,
      "description": "# 📊 Progressive Output Display\n\n**Smart conditional outputs in the highlighted code above.**\n\n**What you'll see:**\n- **Teams only:** Team information and \"drivers not enabled\" messages\n- **Full deployment:** Complete team and driver information\n\n**Educational value:** Clear feedback on what's deployed and what's next! 📈"
    },
    {
      "directory": ".",
      "description": "# 📋 Pre-flight Checklist\n\n**Your mission (stay in root directory):**\n\n1. **Verify environment variables:**\n   Select [this link](command:codetour.sendTextToTerminal?[\"echo \\\"Org: $OKTA_ORG_NAME\\\"\"]) to check your org name.\n\n2. **Copy and customize configuration:**\n   Select [this link](command:codetour.sendTextToTerminal?[\"cp terraform.tfvars.example terraform.tfvars\"]) to copy the configuration.\n   (Ensure enable_drivers = false for now)\n\n3. **Initialize Terraform (terraform init):**\n   Select [this link](command:codetour.sendTextToTerminal?[\"terraform init\"]) to download providers and initialize modules.\n\n**✅ Environment ready!** Let's check what exists before we make changes."
    },
    {
      "directory": ".",
      "description": "# 👀 Check Your Okta Dashboard - BEFORE\n\n**IMPORTANT:** Before running any terraform commands, let's see what's currently in your Okta org!\n\n🔍 **Go to your Okta Admin Console and check the Groups page**\n- You should see just \"Everyone\" and maybe a few default groups\n- Note what exists now so you can see the difference after Terraform runs\n\n**🎯 Why check first?**\n- See the \"before\" state\n- Appreciate the changes Terraform will make\n- Troubleshoot if things don't look right later\n\n**Ready to proceed?** Keep that browser tab open - you'll check again after deployment!"
    },
    {
      "directory": ".",
      "description": "# 🏁 Deploy Your Racing Teams!\n\n**Now let's create some infrastructure!**\n\n**4. Plan your deployment (terraform plan):**\n   Select [this link](command:codetour.sendTextToTerminal?[\\\"terraform plan\\\"]) to preview the changes.\n   \n   **📋 Review the plan carefully:** Look for output showing:\n   - `# okta_group.racing_teams[\\\"velocity\\\"]` will be created\n   - `# okta_group.racing_teams[\\\"thunder\\\"]` will be created  \n   - `# okta_group.racing_teams[\\\"apex\\\"]` will be created\n   - `# okta_group.racing_teams[\\\"quantum\\\"]` will be created\n   - Plan summary: \\\"4 to add, 0 to change, 0 to destroy\\\"\n\n**5. Apply the changes (terraform apply):**\n   Select [this link](command:codetour.sendTextToTerminal?[\\\"terraform apply\\\"]) when ready!\n   \n   **💡 Type `yes` when prompted** to confirm the deployment.\n\n**Success criteria:** 4 racing teams created, drivers module skipped (because enable_drivers = false)\n\n**⏰ This should take 10-30 seconds** - Terraform is talking to Okta's API!"
    },
    {
      "directory": ".",
      "description": "# 🏆 Check Your Okta Dashboard - AFTER\n\n**Time to see your infrastructure magic!**\n\n🔍 **Go back to your Okta Groups page and refresh it**\n- You should now see 4 new racing teams:\n  - 🏎️ **Velocity Racing** (aerodynamics specialists)\n  - ⚡ **Thunder Racing** (speed-focused team)\n  - 🔥 **Apex Racing** (precision-focused team)  \n  - 🚀 **Quantum Racing** (technology innovators)\n\n🔍 **Click on any team to see the rich descriptions with:**\n- Team principals, home circuits, and specialties\n- Season information\n- **(No drivers yet - that's next!)**\n\n**✅ Success?** Your Infrastructure as Code is working! 🎉"
    },
    {
      "directory": ".",
      "description": "# 🚀 Next Steps - Progressive Deployment\n\n**🎯 What you just accomplished:**\n- ✅ Module-based Terraform deployment\n- ✅ Progressive infrastructure rollout (teams first)\n- ✅ Production-quality patterns\n- ✅ Verified results in Okta dashboard\n\n**🏎️ Ready for drivers? In the next section we will:**\n\n- Edit `terraform.tfvars` and change `enable_drivers = false` to `true`\n\n- Run `terraform apply` again to add drivers to your teams!\n\n- The conditional module pattern will deploy the drivers module\n\n**🏁 You've learned production Terraform patterns!** This incremental deployment approach is exactly how real companies roll out infrastructure. Ready for the next tour? 🚀"
    }
  ]
}