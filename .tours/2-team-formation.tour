{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2: 🏁 Module-Based Team Formation",
  "nextTour": "3: 🏎️ Progressive Driver Deployment",
  "description": "Learn production-quality Terraform with modules! Create racing teams using modern Infrastructure as Code patterns.",
  "steps": [
    {
      "file": "main.tf",
      "line": 1,
      "description": "# ♻️  The Terraform development cycle\n\n It's time to start running Terraform commands in the terminal below! You may find it helpful to resize the terminal in the Codespaces interface when you want to read long outputs. \n\n The following steps will walk you through the main Terraform commands: \n\n - `terraform init`: This retrieves providers and creates a state file. You only have to run it if you changed the providers. Running `terraform init` is like building a race track -- essential at the start of your project, but not something you'll do every day! \n - `terraform plan`: This asks Terraform whta will have to change to make the infrastructure look like your code. It uses API calls to read the current state of your Okta organization. `terraform plan` will print a report to your terminal that says what will have to change, but it won't make those changes. \n - `terraform apply`: This tells Terraform to go make your Okta tenant match your Terraform code! This might create or destroy resources if necessary. `terraform apply` has lots of options that we won't use today, but you can see them by running the command `terraform apply --help`"
    },
    {
      "directory": ".",
      "description": "# 🔧 Understanding Terraform Init\n\n**What does `terraform init` do?** It prepares your workspace:\n\n- **Downloads providers** (like installing racing car parts)\n- **Initializes modules** (sets up our team and driver modules)\n- **Creates hidden files** for Terraform's internal management\n\n**Run the initialization:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"terraform init\"]) to initialize your racing infrastructure workspace.\n\n**Expected output:**\n- Provider downloads (Okta provider ~50MB)\n- Module initialization messages\n- Final message: \"Terraform has been successfully initialized!\"\n\n**Files created:**\n- `.terraform/` folder (Terraform's workspace data)\n- `.terraform.lock.hcl` (locks provider versions)\n\n**⏰ Takes 10-30 seconds** depending on your connection."
    },
    {
      "directory": ".",
      "description": "# 📁 Verify Terraform Initialization\n\n**Confirm that initialization completed successfully:**\n\nSelect [this link](command:codetour.sendTextToTerminal?[\"ls -la\"]) to list all files including hidden ones.\n\n**Success indicators:**\n- `.terraform/` folder exists (contains downloaded providers and modules)\n- `.terraform.lock.hcl` file exists (version lock file)\n- Your original files remain unchanged (main.tf, variables.tf, etc.)\n\n**In VS Code:** The `.terraform` folder may appear in the file explorer sidebar.\n\n**✅ Verification complete:** Your Terraform workspace is ready for deployment! 📂"
    },
    {
      "directory": ".",
      "description": "# 👀 Check Your Okta Dashboard - BEFORE\n\n**IMPORTANT:** Before running any terraform commands, let's see what's currently in your Okta org!\n\n🔍 **Go to your Okta Admin Console and check the Groups page**\n- You should see some default groups that came with your organization. \n- Note what exists now so you can see the difference after Terraform runs\n\n**🎯 Why check first?**\n- See the \"before\" state\n- Appreciate the changes Terraform will make\n- Troubleshoot if things don't look right later\n\n**Ready to proceed?** Keep that browser tab open - you'll check again after deployment!"
    },
    {
      "directory": ".",
      "description": "# 🔍 Understanding Terraform Plan\n\n**What does `terraform plan` do?** It's your safety check before making changes:\n\n- **Compares** your code to current infrastructure state\n- **Shows** exactly what will be created, modified, or destroyed  \n- **Validates** your configuration without making changes\n- **Estimates** costs and potential issues\n\n**Think of it as:** Race strategy planning before the actual race!\n\n**Let's see your plan:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"terraform plan\"]) to preview what will be created.\n\n**📋 What to look for:**\n- `+ create` lines show new resources\n- Resource names like `okta_group.racing_teams[\"velocity\"]`\n- Plan summary: \"X to add, Y to change, Z to destroy\"\n\n**⏰ Takes 5-15 seconds** - Terraform is analyzing your configuration!"
    },
    {
      "directory": ".",
      "description": "# 📊 Reading Your Plan Output\n\n**Your plan should show something like:**\n\n```\n# okta_group.racing_teams[\"velocity\"] will be created\n+ resource \"okta_group\" \"racing_teams\" {\n    + description = \"Speed-focused racing team...\"\n    + name        = \"Velocity Racing\"\n    + type        = \"OKTA_GROUP\"\n  }\n```\n\n**Key symbols:**\n- `+` = Will be created\n- `~` = Will be modified \n- `-` = Will be destroyed\n- `#` = Comment explaining the action\n\n**Expected plan summary:** \"4 to add, 0 to change, 0 to destroy\"\n\n**✅ Success criteria:** Four new racing teams will be created, no existing resources affected.\n\n**Ready to deploy?** If you like the changes that your plan shows, proceed to the next step! 🏁"
    },
    {
      "directory": ".",
      "description": "# 🚀 Deploy Your Racing Teams\n\n**What does `terraform apply` do?** It executes your infrastructure plan:\n\n- **Executes** the plan you just reviewed\n- **Makes API calls** to create/modify/delete resources\n- **Updates state file** to track what exists\n- **Shows progress** as changes happen\n\n**Deploy your teams:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"terraform apply\"]) to create your racing infrastructure!\n\n**Important:** Type `yes` when prompted to confirm the deployment.\n\n**Expected progress:**\n- Confirmation prompt asking for approval\n- Real-time creation messages for each team\n- Success confirmation for each resource\n- Final summary showing \"Apply complete! Resources: 4 added, 0 changed, 0 destroyed.\"\n\n**✅ Success criteria:** All 4 racing teams created successfully in Okta.\n\n**⏰ Takes 10-30 seconds** - Creating real resources via Okta API! 🏗️"
    },
    {
      "directory": ".",
      "description": "# 🏆 Check Your Okta Dashboard - AFTER\n\n**Time to see your infrastructure magic!**\n\n🔍 **Go back to your Okta Groups page and refresh it**\n- You should now see 4 new racing teams:\n  - 🏎️ **Velocity Racing** (aerodynamics specialists)\n  - ⚡ **Thunder Racing** (speed-focused team)\n  - 🔥 **Apex Racing** (precision-focused team)  \n  - 🚀 **Quantum Racing** (technology innovators)\n\n🔍 **Click on any team to see the rich descriptions with:**\n- Team principals, home circuits, and specialties\n- Season information\n- **(No drivers yet - that's next!)**\n\n**✅ Success?** Your Infrastructure as Code is working! 🎉"
    },
    {
      "directory": ".",
      "description": "**Congratulations!** \n\n You've successfully created groups in your Okta dashboard. \n\n If you're low on time, continue to the next tour and create drivers. Otherwise, the following steps will show you how Terraform knew what to create. \n\n The following steps will expose you to the techniques and concepts that you'll work with as you become more familiar with Terraform, so don't worry if they're a little confusing on your first day. "
    },
    {
      "file": "main.tf",
      "line": 39,
      "description": "# 🏗️ Racing Teams Module Call\n\n we call a module:\n\n**What's happening:**\n- `source = \"./modules/racing-teams\"` - Local module path\n- Variables passed to the module (racing_season, racing_teams, etc.)\n- Module creates all team resources internally\n\n**Benefits:**\n- Organized code structure\n- Reusable components\n- Production-ready patterns\n\n**Next:** The following steps will show you how the module works internally. 🔍"
    },
    {
      "file": "modules/racing-teams/main.tf",
      "line": 18,
      "selection": {
        "start": {
          "line": 18,
          "character": 1
        },
        "end": {
          "line": 19,
          "character": 40
        }
      },
      "description": "# 🏎️ Module Resource Creation\n\n**Inside the module:** Here's where the real work happens!\n\nNotice the key pattern in the highlighted code above.\n\n**What this does:**\n- Creates one group per team in the racing_teams variable\n- Uses `for_each` for scalable resource creation\n- Builds descriptions dynamically from structured data\n\n**Real benefit:** Add a 5th team by just updating variables! 📈"
    },
    {
      "file": "modules/racing-teams/main.tf",
      "line": 25,
      "selection": {
        "start": {
          "line": 25,
          "character": 3
        },
        "end": {
          "line": 25,
          "character": 180
        }
      },
      "description": "# 🎨 Dynamic Description Building\n\n**Smart string interpolation in the highlighted code above.**\n\n**What you get:**\n- Consistent formatting across all teams\n- Rich metadata in descriptions\n- Easy to modify the template in one place\n\n**Example result:** \"Speed-focused racing team... | Team Principal: Sam Velocity | Home Circuit: Monaco Street Circuit | Specialty: Aerodynamics | Season: 2025\""
    },
    {
      "file": "modules/racing-teams/outputs.tf",
      "line": 5,
      "description": "# 📤 Module Outputs\n\n**Critical for module composition!** These outputs will be used by other modules:\n\n**Key exports:**\n- `team_ids` - Map of team keys to Okta group IDs\n- `team_names` - Map of team keys to display names\n- `team_summary` - Complete team information\n\n**Why this matters:** The drivers module will use these outputs to assign drivers to the correct teams! 🔗"
    },
    {
      "file": "main.tf",
      "line": 55,
      "selection": {
        "start": {
          "line": 55,
          "character": 3
        },
        "end": {
          "line": 55,
          "character": 40
        }
      },
      "description": "# 🏁 Conditional Drivers Module\n\n**Advanced pattern:** Module with conditional deployment!\n\nNotice the key pattern in the highlighted code above.\n\n**What this means:**\n- When `enable_drivers = false`: Module not deployed (0 instances)\n- When `enable_drivers = true`: Module deployed (1 instance)\n\n**Real-world value:** Deploy infrastructure incrementally, perfect for environments where you need staged rollouts!"
    },
    {
      "file": "main.tf",
      "line": 62,
      "selection": {
        "start": {
          "line": 62,
          "character": 3
        },
        "end": {
          "line": 63,
          "character": 60
        }
      },
      "description": "# 🔄 Module Data Flow\n\n**See the dependency chain in the highlighted code above.**\n\n**Data flow:** racing_teams module → outputs → racing_drivers module inputs\n\n**Critical best practice:** This prevents the state file conflicts we had before! All resources managed in one state file, with proper dependencies. 🎯"
    },
    {
      "file": "outputs.tf",
      "line": 5,
      "description": "# 📊 Progressive Output Display\n\n**Smart conditional outputs in the highlighted code above.**\n\n**What you'll see:**\n- **Teams only:** Team information and \"drivers not enabled\" messages\n- **Full deployment:** Complete team and driver information\n\n**Educational value:** Clear feedback on what's deployed and what's next! 📈"
    },
    {
      "directory": ".",
      "description": "# 🚀 Next Steps - Progressive Deployment\n\n**🎯 What you just accomplished:**\n- ✅ Module-based Terraform deployment\n- ✅ Progressive infrastructure rollout (teams first)\n- ✅ Production-quality patterns\n- ✅ Verified results in Okta dashboard\n\n**🏎️ Ready for drivers? In the next section we will:**\n\n- Edit `terraform.tfvars` and change `enable_drivers = false` to `true`\n\n- Run `terraform apply` again to add drivers to your teams!\n\n- The conditional module pattern will deploy the drivers module\n\n**🏁 You've learned production Terraform patterns!** This incremental deployment approach is exactly how real companies roll out infrastructure. Ready for the next tour? 🚀"
    }
  ]
}