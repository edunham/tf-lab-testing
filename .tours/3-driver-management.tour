{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "3: 🏎️ Progressive Driver Deployment",
  "description": "See module-based driver deployment in action! Learn module dependencies, conditional deployment, and how teams and drivers work together in production patterns.",
  "steps": [
    {
      "file": "README.md",
      "line": 140,
      "description": "# 🏎️ Check Your Environment First!\n\n**IMPORTANT:** Before proceeding with drivers, verify your environment variables are still set!\n\n**If you used Codespaces secrets at github.com/settings/codespaces:**\nSelect [this link](command:codetour.sendTextToTerminal?[\"echo \\\"Org Name: $OKTA_ORG_NAME\\\"; echo \\\"Base URL: $OKTA_BASE_URL\\\"; echo \\\"Token loaded: \\\" && [ -n \\\"$OKTA_API_TOKEN\\\" ] && echo \\\"✅ Yes\\\" || echo \\\"❌ No\\\"\"]) to verify your credentials are still loaded.\n\n**✅ If all show values:** Ready for driver deployment!\n**❌ If any are missing:** Set them up following the README guide.\n\n**Why check again?** Environment variables can be lost if you restarted your Codespace! 🔐"
    },
    {
      "file": "terraform.tfvars.example",
      "line": 9,
      "description": "# 🏎️ Ready to Enable Drivers?\n\n**Current status:** Teams are deployed, drivers module is disabled.\n\n**To proceed to driver deployment:**\nChange `enable_drivers = false` to `enable_drivers = true` in your terraform.tfvars file!\n\n**What this triggers:**\n- The `racing-drivers` module will be deployed\n- Conditional deployment pattern in action!\n- Module dependencies automatically handled\n\n**Production insight:** This is how real infrastructure rollouts work - staged deployments! 🚀"
    },
    {
      "file": "main.tf",
      "line": 55,
      "selection": {
        "start": {
          "line": 55,
          "character": 3
        },
        "end": {
          "line": 55,
          "character": 40
        }
      },
      "description": "# 🏁 Conditional Module Deployment\n\n**Module magic:** This shows conditional deployment patterns!\n\nNotice the key pattern in the highlighted code above.\n\n**What happens:**\n- When `enable_drivers = false`: 0 instances (module not deployed)\n- When `enable_drivers = true`: 1 instance (module deployed)\n\n**Real-world value:** Perfect for environment-specific deployments! 🎯"
    },
    {
      "file": "main.tf",
      "line": 62,
      "selection": {
        "start": {
          "line": 62,
          "character": 3
        },
        "end": {
          "line": 63,
          "character": 60
        }
      },
      "description": "# 🔗 Module Data Flow\n\n**Critical pattern:** How modules share data!\n\nNotice the key pattern in the highlighted code above.\n\n**Data pipeline:**\n1. `racing_teams` module creates teams and exports IDs\n2. Root configuration passes those IDs to `racing_drivers`\n3. `racing_drivers` uses team IDs for driver assignments\n\n**Best practice:** This prevents state file conflicts! 🎯"
    },
    {
      "file": "modules/racing-drivers/main.tf",
      "line": 16,
      "selection": {
        "start": {
          "line": 16,
          "character": 1
        },
        "end": {
          "line": 17,
          "character": 50
        }
      },
      "description": "# 🏁 Dynamic Driver Creation\n\n**Inside the drivers module:** The magic of `for_each`!\n\nNotice the key pattern in the highlighted code above.\n\n**How it works:**\n- `var.racing_drivers` contains all driver definitions\n- `for_each` creates one user per driver\n- `each.key` provides unique identifier (driver handle)\n- `each.value` accesses driver properties\n\n**Result:** One resource definition creates all drivers! 🚀"
    },
    {
      "file": "modules/racing-drivers/main.tf",
      "line": 21,
      "selection": {
        "start": {
          "line": 21,
          "character": 3
        },
        "end": {
          "line": 22,
          "character": 110
        }
      },
      "description": "# 📧 Dynamic Email Generation\n\n**Smart string interpolation creates unique emails in the highlighted code above.**\n\n**Example transformation:**\n- Input: `first_name = \"Max\"`, `last_name = \"Speedwell\"`\n- Domain: `email_domain = \"velocity-racing.com\"`\n- Result: `Max.Speedwell@velocity-racing.com`\n\n**Why this rocks:** Consistent naming, no manual email creation! ✨"
    },
    {
      "file": "modules/racing-drivers/main.tf",
      "line": 30,
      "selection": {
        "start": {
          "line": 30,
          "character": 1
        },
        "end": {
          "line": 34,
          "character": 50
        }
      },
      "description": "# 👥 Team Assignments - Module Dependencies!\n\n**Critical pattern:** How drivers get assigned to teams!\n\nNotice the key pattern in the highlighted code above.\n\n**Data flow:**\n1. Root passes team IDs from `racing_teams` module\n2. Drivers module uses those IDs for assignments\n3. Automatic dependency management!\n\n**Best practice:** Module composition in action! 🎯"
    },
    {
      "file": "modules/racing-drivers/outputs.tf",
      "line": 5,
      "description": "# 📤 Driver Module Outputs\n\n**Rich output structure:**\n- Individual driver information\n- Team assignment mappings\n- Championship statistics\n- Performance analytics\n\n**Key insight:** Modules should export comprehensive data for:\n- Root configuration outputs\n- Other modules that depend on this data\n- Monitoring and reporting systems\n\n**Production pattern:** Well-designed module outputs! 📊"
    },
    {
      "file": "outputs.tf",
      "line": 35,
      "description": "# 📊 Conditional Root Outputs\n\n**Smart output patterns in the highlighted code above.**\n\n**What you see:**\n- **Teams only**: Team info, \"drivers not enabled\" messages  \n- **Full deployment**: Complete team and driver information\n- **Progressive feedback**: Clear next steps guidance\n\n**Why this matters:** User-friendly feedback during progressive deployment! 🚀"
    },
    {
      "file": "variables.tf",
      "line": 1,
      "description": "# 🎛️ Variable-Driven Architecture\n\n**Key variables for driver deployment:**\n- `enable_drivers`: Controls conditional module deployment\n- `create_example_drivers`: Controls whether to create sample drivers\n- `racing_drivers`: Complete driver definitions\n\n**Production insight:** Variables control deployment behavior - this is how you manage different environments (dev/staging/prod) with the same code! 🏗️"
    },
    {
      "directory": ".",
      "description": "# 📋 Pre-Driver Deployment Checklist\n\n**Your progressive deployment mission (stay in root directory):**\n\n1. **Modify configuration:**\n   Edit `terraform.tfvars` and change `enable_drivers = false` to `enable_drivers = true`\n\n**✅ Configuration updated!** Time to check current state before adding drivers."
    },
    {
      "directory": ".",
      "description": "# 👀 Check Your Okta Dashboard - BEFORE Drivers\n\n**IMPORTANT:** Let's verify your racing teams are ready for drivers!\n\n🔍 **Go to your Okta Groups page and verify your 4 racing teams exist:**\n- 🏎️ Velocity Racing\n- ⚡ Thunder Racing \n- 🔥 Apex Racing\n- 🚀 Quantum Racing\n\n🔍 **Click on any team → People tab → Should show 0 members**\n\n🔍 **Go to your Okta People page → Should show just admin users**\n\n**🎯 Why check first?** You'll see the dramatic difference after adding drivers!\n\n**Ready to add some racing talent?** 🏁"
    },
    {
      "directory": ".",
      "description": "# 🔍 Plan Your Driver Deployment\n\n**Time to add drivers to your racing teams!**\n\n**Run terraform plan to see the changes:**\nSelect [this link](command:codetour.sendTextToTerminal?[\\\"terraform plan\\\"]) to preview the driver module deployment.\n\n**📋 What you should see:**\n- **New users:** 8 racing drivers being created\n- **Team memberships:** 8 group assignments\n- **Plan summary:** \"16 to add, 0 to change, 0 to destroy\"\n\n**Key resource types:**\n- `okta_user.racing_drivers[\"max-speedwell\"]` - Individual driver accounts\n- `okta_group_memberships.team_memberships[\"max-speedwell\"]` - Team assignments\n\n**🎯 Notice:** Existing teams are unchanged - we're adding to the infrastructure!\n\n**⏰ Takes 5-15 seconds** - Analyzing the expanded configuration."
    },
    {
      "directory": ".",
      "description": "# 🚀 Deploy Your Racing Drivers!\n\n**Ready to bring your drivers to life in Okta?**\n\n**Apply the driver deployment:**\nSelect [this link](command:codetour.sendTextToTerminal?[\\\"terraform apply\\\"]) to create drivers and assign them to teams!\n\n**💡 Type `yes` when prompted** to confirm the deployment.\n\n**What you'll see during apply:**\n- **User creation:** Each driver being created with F1-themed details\n- **Team assignments:** Group memberships being established\n- **Progress updates:** Real-time status as API calls complete\n\n**Success criteria:**\n- 8 new racing drivers created in Okta\n- Each driver assigned to their racing team\n- Single state file managing everything!\n\n**⏰ Takes 30-60 seconds** - Creating users and memberships via Okta API! 🏗️"
    },
    {
      "directory": ".",
      "description": "# 🏆 Check Your Okta Dashboard - AFTER Drivers\n\n**Time to see your complete F1 organization!**\n\n🔍 **Go back to your Okta Groups page → Click on each racing team → People tab**\n- You should see drivers like:\n  - Max Speedwell, Sarah Velocity (Velocity Racing)\n  - Jake Thunder, Emma Lightning (Thunder Racing)\n  - Liam Apex, Sophia Precision (Apex Racing)\n  - Noah Quantum, Ava Innovation (Quantum Racing)\n\n🔍 **Go to your Okta People page**\n- You should see all 8 racing drivers with F1-themed names\n- Click on any driver to see their profile and group memberships\n\n**✅ Success?** You've deployed a complete racing organization with Infrastructure as Code! 🎉"
    },
    {
      "directory": ".",
      "description": "# 🚀 Mission Accomplished!\n\n**🎯 What you just mastered:**\n- ✅ **Progressive deployment** patterns (teams → drivers)\n- ✅ **Module dependencies** and data sharing\n- ✅ **Conditional resource deployment** (`count` patterns)\n- ✅ **Single state file management** (no conflicts!)\n- ✅ **Before/after verification** workflow\n- ✅ **Production-quality Terraform** architecture\n\n**🏁 Real-World Skills Gained:**\n- How to structure Terraform modules\n- Progressive infrastructure rollouts\n- Proper state management\n- API integration verification\n\n**🏆 Congratulations!** You've learned enterprise-grade Infrastructure as Code patterns using a fun F1 theme. These are the exact patterns used by major companies to manage their infrastructure at scale!\n\n**Ready for cleanup?** Run `terraform destroy` when you're done exploring!"
    }
  ]
}